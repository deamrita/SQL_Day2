ALTER TABLE STUDENT_DET
ADD STUDENT_SCORE
NUMERIC(10);

SELECT * FROM STUDENT_DET

UPDATE STUDENT_DET SET STUDENT_SCORE = 90 WHERE STU_ID = 1
UPDATE STUDENT_DET SET STUDENT_SCORE = 80 WHERE STU_ID = 2
UPDATE STUDENT_DET SET STUDENT_SCORE = 85 WHERE STU_ID = 3
UPDATE STUDENT_DET SET STUDENT_SCORE = 71 WHERE STU_ID = 4
UPDATE STUDENT_DET SET STUDENT_SCORE = 92 WHERE STU_ID = 5

INSERT INTO STUDENT_DET(STU_ID,STU_NAME,STU_AGE,COURSE_ID,STU_PH_NO,STUDENT_SCORE) VALUES (6, 'ghr',24, 101, 9078954, 90)
INSERT INTO STUDENT_DET(STU_ID,STU_NAME,STU_AGE,COURSE_ID,STU_PH_NO,STUDENT_SCORE) VALUES (7, 'hjr',27, 101, 9078890, 82)
INSERT INTO STUDENT_DET(STU_ID,STU_NAME,STU_AGE,COURSE_ID,STU_PH_NO,STUDENT_SCORE) VALUES (8, 'rte',28, 102, 9078412, 78)
INSERT INTO STUDENT_DET(STU_ID,STU_NAME,STU_AGE,COURSE_ID,STU_PH_NO,STUDENT_SCORE) VALUES (9, 'uio',23, 102, 9071234, 89)
INSERT INTO STUDENT_DET(STU_ID,STU_NAME,STU_AGE,COURSE_ID,STU_PH_NO,STUDENT_SCORE) VALUES (10, 'uit',25, 103, 9078783, 85)
INSERT INTO STUDENT_DET(STU_ID,STU_NAME,STU_AGE,COURSE_ID,STU_PH_NO,STUDENT_SCORE) VALUES (11, 'vbf',25, 103, 9078902, 82)

------GROUP BY AND AGGREGATE FUNCTION----------
SELECT MAX(S.STUDENT_SCORE) AS MAX_SCORE,C.COURSE_NAME FROM
STUDENT_DET S INNER JOIN 
COURSE C
ON S.COURSE_ID = C.COURSE_ID
GROUP BY C.COURSE_NAME

------------WINDOW FUNCTION---------------
------------OVER()-------------------------
SELECT C.COURSE_NAME, S.STU_ID, S.STU_NAME,
MAX(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME) AS MAX_SCORE
FROM 
STUDENT_DET S INNER JOIN 
COURSE C
ON S.COURSE_ID = C.COURSE_ID

------------ROW_NUMBER() CREATING A SINGLE WINDOW FUNCTION-----------------
SELECT S.*,
ROW_NUMBER() OVER(ORDER BY S.STUDENT_SCORE) AS ROW_NUM
FROM STUDENT_DET S

-----------------ROW_NUMBER() ADD UNIQUE NO. CREATING WINDOW FUNCTION FOR EVERY COURSE---------
SELECT S.*, C.COURSE_NAME,
ROW_NUMBER() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS ROW_NUM
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

-------------------GETTING TOP SCORER ROW_NUMBER()---------------
select * from
(SELECT S.*, C.COURSE_NAME,
ROW_NUMBER() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS ROW_NUM
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID) X
where X.ROW_NUM < 2

--------------------- RANK()-----------------
SELECT S.*, C.COURSE_NAME,
RANK() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS RNK
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

----------------RANK() TOP 2 SCORER---------------------
SELECT * FROM
(SELECT S.*, C.COURSE_NAME,
RANK() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS RNK
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID) X
WHERE X.RNK < 3

---------------- DENSE_RANK() DOES NOT SKIP ANY VALUE---------------
SELECT S.*, C.COURSE_NAME,
RANK() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS RNK,
DENSE_RANK() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS DNS_RNK
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

----DIFFERENCE BETWEEN RANK() DENSE_RANK() AND ROW_NUMBER()--------------
SELECT S.*, C.COURSE_NAME,
RANK() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS RNK,
DENSE_RANK() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS DNS_RNK,
ROW_NUMBER() OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STUDENT_SCORE DESC) AS ROW_NUM
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

--------- LAG() TO GET PREVIOUS VALUE LAG(Score, n #how many LEAP TO TAKE by default 1, 0 #0 instead of DEFAULT null)-------------
SELECT S.*, C.COURSE_NAME,
LAG(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) AS PREV_STU_SCORE
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

SELECT S.*, C.COURSE_NAME,
LAG(S.STUDENT_SCORE,2,0) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) AS PREV_STU_SCORE
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

------------ LEAD() TO GET NEXT VALUE --------------------
SELECT S.*, C.COURSE_NAME,
LEAD(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) AS NEXT_STU_SCORE
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

SELECT S.*, C.COURSE_NAME,
LEAD(S.STUDENT_SCORE,2,0) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) AS NEXT_STU_SCORE
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID

----------EXAMPLE OF LAG()----------------
SELECT S.*, C.COURSE_NAME,
LAG(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) AS PREV_STU_SCORE,
CASE WHEN S.STUDENT_SCORE > LAG(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) THEN 'HIGHER THAN PREVIOUS'
	 WHEN S.STUDENT_SCORE < LAG(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) THEN 'LOWER THAN PREVIOUS'
	 WHEN S.STUDENT_SCORE = LAG(S.STUDENT_SCORE) OVER(PARTITION BY C.COURSE_NAME ORDER BY S.STU_ID) THEN 'EQUAL'
	 END REMARKS
FROM STUDENT_DET S
INNER JOIN COURSE C
ON S.COURSE_ID = C.COURSE_ID